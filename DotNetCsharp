

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using clsDatabaseAccessPoint;
using Microsoft.VisualBasic;
using ESRI.ArcGIS.Geodatabase;
using ESRI.ArcGIS.Catalog;
using ESRI.ArcGIS.DataSourcesGDB;
using ESRI.ArcGIS.CatalogUI;
using ESRI.ArcGIS.Geometry;

namespace clsArcMapMappingTools
{
    public partial class frmCreateBallotBoundaries : Form
    {
        public frmCreateBallotBoundaries()
        {
            InitializeComponent();
        }

        //class-wide variables
        SqlDataReader sqlDR_CPCs;
        SqlDataReader sqlDR_ElectNos;
        SqlDataReader sqlDR;
        SqlDataReader sqlDR_CPC_Pcts;
        SqlDataReader sqlDR_BallotBoundaries;
        SqlDataReader sqlDR_GenElecPcts;
        SqlDataReader sqlDR_GetUniqueElectDists;
        string strPrecinctsList = null;
        

        //this method executes when the form loads, and adds cpc election dates to the combobox
        private void frmCreateCPCPolygons_Load(object sender, EventArgs e)
        {
            try
            {
                //show busy mouse
                System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

                //connect to the DATABASENAMEHERE database
                clsDatabaseAccessPoint.clsDatabaseAccessPoint DB = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                Microsoft.VisualBasic.Collection colIn = new Microsoft.VisualBasic.Collection(); //i had to use this because a clsDatabaseAccessPoint argument requires a visual basic collection (until they write a c# one, i guess we will do it this way) 

                DB.ConnectDatabase("DatabaseNameHere");
                colIn.Clear();

                //query the ELECTION table, based on query in DATABASENAME QUERY table
                sqlDR = DB.GetData("GIS_GetElectionDates", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn) as SqlDataReader;

                //clear the combobox
                cboCPCElections.Items.Clear();

                //check if the query returned any rows
                if (sqlDR.HasRows)
                {
                    //loop through the collection
                    while (sqlDR.Read())
                    {
                         cboCPCElections.Items.Add(sqlDR["date"].ToString());
                    }
                }
                else //could not find an election date for election number
                {
                    MessageBox.Show("There was an error with the query table on GetElectionDate", "Query Table Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                //close the get election dates data reader
                if (sqlDR != null)
                {
                    if (!sqlDR.IsClosed)
                    {
                        sqlDR.Close();
                    }
                    sqlDR = null;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Message: " + Environment.NewLine + ex.Message + Environment.NewLine + Environment.NewLine +
                "Error Source: " + Environment.NewLine + ex.Source + Environment.NewLine + Environment.NewLine +
                "Error Location:" + Environment.NewLine + ex.StackTrace,
                "Election ArcMap Mapping Tools Error!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }



        //this method executes when the user clicks the create polygon button
        private void cmdCreatePolygons_Click(object sender, EventArgs e)
        {
            try
            {
                //show busy mouse
                System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

                //connect to sde
                IWorkspace workspace = clsElecMappingToolsStaticClass.ConnectToTransactionalVersion("", "sde:sqlserver:ServerNameHere", "DatabaseNameHere", "OSA", "dbo.DEFAULT");
                IFeatureWorkspace featureWorkspace = (IFeatureWorkspace)workspace;

                //get cities annex
                IFeatureClass pFClassCitiesAnnex = featureWorkspace.OpenFeatureClass("DATABASENAMEHERE.DBO.CitiesAnnex");

                //get school districts
                IFeatureClass pFClassSchools = featureWorkspace.OpenFeatureClass("DATABASENAMEHERE.DBO.SchoolDistricts");

                //get high school districts
                IFeatureClass pFClassHighSchools = featureWorkspace.OpenFeatureClass("DATABASENAMEHERE.DBO.HighSchoolDistricts");

                //get election boundaries
                IFeatureClass pFCElectionBoundaries = featureWorkspace.OpenFeatureClass("DATABASENAMEHERE.DBO.ElectionBoundaries"); //DATABASENAMEHERE.DBO.ElectionBoundariesREPC

                //get voting precincts
                IFeatureClass pFClassVotingPrecincts = featureWorkspace.OpenFeatureClass("DATABASENAMEHERE.DBO.VotingPrecincts"); //DATABASENAMEHERE.DBO.VotingPrecincts2008

                //get ballot boundaries
                IFeatureClass pFClassBallotBoundaries = featureWorkspace.OpenFeatureClass("DATABASENAMEHERE.DBO.BallotBoundaries");

                //this block of code is to get the spatial refernece of the dataset (via voting precincts feature class), used with the geometry bag and the union below
                IGeoDataset pGeoDataset = pFClassVotingPrecincts as IGeoDataset;



                #region "Create a New Feature Class in an existing File Geodatabase â€“ THIS IS OPTIONAL"
                //___________________________________________________________________ use this code if you want to use save the output to a file geodatabase (below)

                ////used for passing in the spatial reference in the new feature class that is created below
                //IDataset pDataSet = featureWorkspace.OpenFeatureDataset("DATABASENAMEHERE.DBO.ElectionsDistrictData");
                //IGeoDataset pGeoDataSet = pDataSet as IGeoDataset;

                ////set name and location for cpc polygon feature class
                //IGxDialog pGxDialog = new GxDialog();
                //pGxDialog.AllowMultiSelect = false;
                //pGxDialog.Title = "Save Feature Class";
                //IGxObjectFilter pGxObjectFilter = new GxFilterFGDBFeatureClasses();
                //pGxDialog.ObjectFilter = pGxObjectFilter;
                //pGxDialog.Name = "";  //clears out any text in the feature class name

                ////open dialog
                //Boolean CancelBrowser; //cancel the dialog if button is clicked
                //CancelBrowser = pGxDialog.DoModalSave(0); //opens the dialog to save data

                ////if cancel was clicked
                //if (CancelBrowser == false)
                //{
                //    return;
                //}

                ////replace spaces in name with underscores
                //pGxDialog.Name = pGxDialog.Name.Replace(" ", "_");

                ////make sure the fist character is not numeric
                //if (char.IsNumber(pGxDialog.Name, 0))
                //{
                //    MessageBox.Show("Please use an alpha character for the first character in the table name.", "Check First Character", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}

                ////set the final location
                //IGxObject pGxObject = pGxDialog.FinalLocation;

                ////open the workspace
                //IWorkspaceFactory pWorkspaceFactory = new FileGDBWorkspaceFactory();
                //IWorkspace pWorkspace = pWorkspaceFactory.OpenFromFile(pGxObject.FullName, 0);
                //IFeatureWorkspace pFeatureWorkspace = (IFeatureWorkspace)pWorkspace;

                ////check if overwriting
                //IEnumDataset pEnumDataset = pWorkspace.get_Datasets(esriDatasetType.esriDTAny);
                //IDataset pDataset = pEnumDataset.Next();

                ////loop through all the datasets in the workspace
                //while (pDataset != null)
                //{
                //    //if the name exists in the dataset/workspace
                //    if (pDataset.Name == pGxDialog.Name)
                //    {
                //        //check if the user wants to overwrite the data
                //        if (MessageBox.Show("Overwrite existing data?", "Overwrite Data?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                //        {
                //            //if the user wants to overwrite the data, delete the feature class with the same name
                //            pDataset.Delete();
                //            break; //exit the loop
                //        }
                //        else
                //        {
                //            return; //exit the method because the user does not want to overwrite the data
                //        }
                //    }
                //    pDataset = pEnumDataset.Next(); //move to the next dataset
                //}


                ////create a fields collection for the feature class.
                //IFields pFields = new FieldsClass();
                //IFieldsEdit pFieldsEdit = (IFieldsEdit)pFields;

                ////add an ObjectID field to the fields collection. This is mandatory for feature classes.
                //IField oidField = new FieldClass();
                //IFieldEdit oidFieldEdit = (IFieldEdit)oidField;
                //oidFieldEdit.Name_2 = "OBJECTID";
                //oidFieldEdit.Type_2 = esriFieldType.esriFieldTypeOID;
                ////add the oid field to the fields collection
                //pFieldsEdit.AddField(oidField);

                ////add a geometry field to the fields collection. This is where the geometry definition is applied.
                //IField geometryField = new FieldClass();
                //IFieldEdit geometryFieldEdit = (IFieldEdit)geometryField;
                //geometryFieldEdit.Name_2 = "SHAPE";
                //geometryFieldEdit.Type_2 = esriFieldType.esriFieldTypeGeometry;
                ////define the geometry
                //IGeometryDef geometryDef = new GeometryDef();
                //IGeometryDefEdit geometryDefEdit = (IGeometryDefEdit)geometryDef;
                //geometryDefEdit.GeometryType_2 = esriGeometryType.esriGeometryPolygon;
                //geometryDefEdit.SpatialReference_2 = pGeoDataSet.SpatialReference;
                //geometryDefEdit.HasZ_2 = false;
                //geometryFieldEdit.GeometryDef_2 = geometryDef;
                ////add the geometry field to the fields collection
                //pFieldsEdit.AddField(geometryField);

                ////create electno field
                //IField electnoField = new FieldClass();
                //IFieldEdit electnoFieldEdit = (IFieldEdit)electnoField;
                //electnoFieldEdit.Name_2 = "ELECTNO";
                //electnoFieldEdit.Type_2 = esriFieldType.esriFieldTypeSmallInteger;
                //electnoFieldEdit.Length_2 = 5;
                ////add electno field to fields collection
                //pFieldsEdit.AddField(electnoField);

                ////create election date field
                //IField elecDateField = new FieldClass();
                //IFieldEdit elecDateFieldEdit = (IFieldEdit)elecDateField;
                //elecDateFieldEdit.Name_2 = "ELECTDATE";
                //elecDateFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //elecDateFieldEdit.Length_2 = 12;
                ////add ballot color field to fields collection
                //pFieldsEdit.AddField(elecDateField);

                ////create ballot color field
                //IField colorField = new FieldClass();
                //IFieldEdit colorFieldEdit = (IFieldEdit)colorField;
                //colorFieldEdit.Name_2 = "COLOR";
                //colorFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //colorFieldEdit.Length_2 = 10;
                ////add ballot color field to fields collection
                //pFieldsEdit.AddField(colorField);

                ////create splitid field
                //IField splitIdField = new FieldClass();
                //IFieldEdit splitIdFieldEdit = (IFieldEdit)splitIdField;
                //splitIdFieldEdit.Name_2 = "SPLITID";
                //splitIdFieldEdit.Type_2 = esriFieldType.esriFieldTypeInteger;
                //splitIdFieldEdit.Length_2 = 10;
                ////add splitid field to fields collection
                //pFieldsEdit.AddField(splitIdField);

                ////create electpct field
                //IField electpctField = new FieldClass();
                //IFieldEdit electpctFieldEdit = (IFieldEdit)electpctField;
                //electpctFieldEdit.Name_2 = "ELECTPCT";
                //electpctFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //electpctFieldEdit.Length_2 = 4;
                ////add electpct field to fields collection
                //pFieldsEdit.AddField(electpctField);

                ////create schdist field
                //IField schdistField = new FieldClass();
                //IFieldEdit schdistFieldEdit = (IFieldEdit)schdistField;
                //schdistFieldEdit.Name_2 = "SCHDIST";
                ////schdistFieldEdit.Type_2 = esriFieldType.esriFieldTypeSmallInteger;
                //schdistFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //schdistFieldEdit.Length_2 = 5;
                ////add schdist to fields collection
                //pFieldsEdit.AddField(schdistField);

                ////create high school dist field
                //IField hsdistField = new FieldClass();
                //IFieldEdit hsdistFieldEdit = (IFieldEdit)hsdistField;
                //hsdistFieldEdit.Name_2 = "HSCHDST";
                ////hsdistFieldEdit.Type_2 = esriFieldType.esriFieldTypeSmallInteger;
                //hsdistFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //hsdistFieldEdit.Length_2 = 5;
                ////add hsdist to fields collection
                //pFieldsEdit.AddField(hsdistField);

                ////create city dist field
                //IField ctyField = new FieldClass();
                //IFieldEdit ctyFieldEdit = (IFieldEdit)ctyField;
                //ctyFieldEdit.Name_2 = "CTYDIST";
                //ctyFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //ctyFieldEdit.Length_2 = 5;
                ////add city dist to fields collection
                //pFieldsEdit.AddField(ctyField);

                ////create evit dist field
                //IField evitField = new FieldClass();
                //IFieldEdit evitFieldEdit = (IFieldEdit)evitField;
                //evitFieldEdit.Name_2 = "EVITDIST";
                //evitFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //evitFieldEdit.Length_2 = 5;
                ////add evit dist to fields collection
                //pFieldsEdit.AddField(evitField);

                ////create fire dist field
                //IField fireField = new FieldClass();
                //IFieldEdit fireFieldEdit = (IFieldEdit)fireField;
                //fireFieldEdit.Name_2 = "FIREDIST";
                //fireFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //fireFieldEdit.Length_2 = 5;
                ////add fire dist to fields collection
                //pFieldsEdit.AddField(fireField);

                ////create sanitary dist field
                //IField santField = new FieldClass();
                //IFieldEdit santFieldEdit = (IFieldEdit)santField;
                //santFieldEdit.Name_2 = "SANTDIST";
                //santFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //santFieldEdit.Length_2 = 10;
                ////add sanitary dist to fields collection
                //pFieldsEdit.AddField(santField);

                ////create bln1dist (Q Districts) field
                //IField bln1Field = new FieldClass();
                //IFieldEdit bln1FieldEdit = (IFieldEdit)bln1Field;
                //bln1FieldEdit.Name_2 = "BLN1DIST";
                //bln1FieldEdit.Type_2 = esriFieldType.esriFieldTypeString;
                //bln1FieldEdit.Length_2 = 10;
                ////add bln1dist to fields collection
                //pFieldsEdit.AddField(bln1Field);

                ////create voter total field
                //IField votTotField = new FieldClass();
                //IFieldEdit votTotFieldEdit = (IFieldEdit)votTotField;
                //votTotFieldEdit.Name_2 = "VOTRTOT";
                //votTotFieldEdit.Type_2 = esriFieldType.esriFieldTypeInteger;
                //votTotFieldEdit.Length_2 = 10;
                ////add voter total to fields collection
                //pFieldsEdit.AddField(votTotField);

                ////create date field showing the date when this tool created the polygons
                //IField createDateField = new FieldClass();
                //IFieldEdit createDateFieldEdit = (IFieldEdit)createDateField;
                //createDateFieldEdit.Name_2 = "DateCreated";
                //createDateFieldEdit.Type_2 = esriFieldType.esriFieldTypeDate;
                ////add fire dist to fields collection
                //pFieldsEdit.AddField(createDateField);

                ////use IFieldChecker to create a validated fields collection.
                //IFieldChecker fieldChecker = new FieldCheckerClass();
                //IEnumFieldError enumFieldError = null;
                //IFields validatedFields = null;
                //fieldChecker.ValidateWorkspace = (IWorkspace)pFeatureWorkspace;
                //fieldChecker.Validate(pFields, out enumFieldError, out validatedFields);

                ////create the feature class
                //IFeatureClass pFeatureClass = pFeatureWorkspace.CreateFeatureClass(pGxDialog.Name, validatedFields, null, null, esriFeatureType.esriFTSimple, "SHAPE", "");
                //___________________________________________________________________ use this code if you want to use save the output to a file geodatabase (^^ above ^^)
                #endregion



                //get all the election numbers associated with the selected election date
                //connect to the DATABASENAMEHERE database
                clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_ElectNos = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                Microsoft.VisualBasic.Collection colIn = new Microsoft.VisualBasic.Collection(); //i had to use this because a clsDatabaseAccessPoint argument requires a visual basic collection (until they write a c# one, i guess we will do it this way) 

                //connect to the DatabaseNameHere database
                DB_ElectNos.ConnectDatabase("DATABASENAMEHERE");
                colIn.Clear();
                colIn.Add(cboCPCElections.SelectedItem.ToString().Trim());

                //query the ELECTION table, based on query in DATABASENAME QUERY table
                sqlDR_ElectNos = DB_ElectNos.GetData("GIS_GetElectNosFromElectDate", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn) as SqlDataReader;

                //check if the query returned any election numbers, based on the selected election date
                if (sqlDR_ElectNos.HasRows)                 
                {
                    //loop through all the election numbers that are associated with the selected election date
                    while (sqlDR_ElectNos.Read())
                    {
                        //determine if it's a general election (using all voting precincts) or a cpc election (using consolidated precincts)
                        //by checking if there are any values in the newelectcpc table (if there are records in this table then it's a cpc election)
                        //connect again to the DATABASENAMEHERE database and check if there are any cpcs associated with this election number
                        clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_CPCs = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                        Microsoft.VisualBasic.Collection colIn_CPCs = new Microsoft.VisualBasic.Collection(); 

                        DB_CPCs.ConnectDatabase("DATABASENAMEHERE");
                        colIn_CPCs.Clear();
                        colIn_CPCs.Add(sqlDR_ElectNos["ELECTNO"]);

                        //query the newelectcpc table, checking for cpcs
                        sqlDR_CPCs = DB_CPCs.GetData("GIS_GetCPCList", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_CPCs) as SqlDataReader;


                        //IT'S A CPC ELECTION//  BEGIN...
                        #region "CPC Election Code"
                        //check if it's a cpc election - aka: the GIS_GetCPCList DatabaseName query returned rows - if it didn't, it's a general election so jump to the else-statement below
                        //don't loop through elections titled 'consolidated elections' because they don't have any boundaries in the **** table, rather, use the individual election numbers that participate in the consolidated election
                        if (sqlDR_CPCs.HasRows & sqlDR_ElectNos["ELECTTTL"].ToString().Trim() != "CONSOLIDATED ELECTIONS") 
                        {
                                //loop through the cpcs
                                while (sqlDR_CPCs.Read())
                                {   
                                    //show busy mouse
                                    System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

                                    ITopologicalOperator4 pPolygonCPCOutline;
                                    ITopologicalOperator4 pPolyUnionSchoolDist = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionHSSchoolDist = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionCityTown = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionTechDist = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionFireDist = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionSanitaryDist = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionQDist = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionSchoolDistRemove = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionHSSchoolDistRemove = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionCityTownRemove = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionTechDistRemove = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionFireDistRemove = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionSanitaryDistRemove = new PolygonClass();
                                    ITopologicalOperator4 pPolyUnionQDistRemove = new PolygonClass();

                                    //get all the voting precincts associated with the current cpc
                                    clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_CPC_Pcts = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                                    Microsoft.VisualBasic.Collection colIn_CPC_Pcts = new Microsoft.VisualBasic.Collection();

                                    DB_CPC_Pcts.ConnectDatabase("DATABASENAMEHERE");
                                    colIn_CPC_Pcts.Add(sqlDR_CPCs["CPC"]);
                                    colIn_CPC_Pcts.Add(sqlDR_ElectNos["ElectNo"]);

                                    //query the newelectcpc table, getting all precincts associated with the current cpc
                                    sqlDR_CPC_Pcts = DB_CPC_Pcts.GetData("GIS_GetCPCPrecincts", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_CPC_Pcts) as SqlDataReader;

                                    #region "Union Precincts that Compose this CPC"
                                    //UNION THE PRECINCTS TOGETHER THAT MAKE UP THIS CPC// BEGIN...
                                    //check if the cpc number and elect number query returned any precincts - if so, union them together creating a new polygon
                                    if (sqlDR_CPC_Pcts.HasRows)
                                    {
                                        //loop through the precincts associated with the current cpc and union them together, used for an intersect with elect boundaries
                                        strPrecinctsList = null; //remove the precinct numbers from the former cpc query
                                        while (sqlDR_CPC_Pcts.Read())
	                                    {
	                                       //get all precincts in a string, which we pass into a feature class query
                                            strPrecinctsList = strPrecinctsList + @"'" + sqlDR_CPC_Pcts["electpct"] + @"',";
	                                    }
                                        //remove the last character in the string (the comma)
                                        strPrecinctsList = strPrecinctsList.TrimEnd(',');
                                        //strPrecinctsList = strPrecinctsList.Remove(strPrecinctsList.Length -1);

	                                    
                                        //get the precincts in this cpc from voting precinct feature class
                                        //create query filter for the voting precincts
                                        IQueryFilter pQueryFilter = new QueryFilter();
                                        pQueryFilter.WhereClause = @"BDVAL in (" + strPrecinctsList + @")";

                                        //put the features(precincts) in a geometry bag so we can union them together, getting the outline shape of the cpc
                                        IGeometryBag pGeometryBag = new GeometryBagClass();

                                        //define the geometry bag's spatial reference before adding geometries
                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;

                                        //query the voting precincts feature class, getting the precincts that participate in the current cpc
                                        //use a nonrecycling cursor so each returned geometry is a separate object
                                        IFeatureCursor pFeatCursorCPC_Pcts = pFClassVotingPrecincts.Search(pQueryFilter,false);

                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                        //get access to the first precinct
                                        IFeature pFeatureCPC_Pct = pFeatCursorCPC_Pcts.NextFeature();

                                        //loop through all the precincts in this cpc and add them to the geometry bag
                                        while (pFeatureCPC_Pct != null)
                                        {
                                            //simplify before adding to geometry collection
                                            IGeometry arcGeometrySimplified1 = pFeatureCPC_Pct.Shape;
                                            arcGeometrySimplified1.SpatialReference = pFeatureCPC_Pct.Shape.SpatialReference;
                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                            object missing = Type.Missing;
                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                            pFeatureCPC_Pct = pFeatCursorCPC_Pcts.NextFeature();
                                        }

                                        //union all the voting precincts that are in the geometry bag - outputting a polygon used for a boundary intersect below
                                        pPolygonCPCOutline = new PolygonClass();
                                        pPolygonCPCOutline.ConstructUnion(pGeometryBag as IEnumGeometry);

                                        //null out union variables, so we can reuse them below
                                        pQueryFilter = null;
                                        pGeometryBag = null;
                                        pGeometryCollection = null;
                                        //release the feature cursor - release memory
                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatCursorCPC_Pcts);
                                        pFeatCursorCPC_Pcts = null;

                                    } //end of if-statement - this cpc has precincts - union them together 
                                    //message box informing the user that this cpc has no precincts in it
                                    else
                                    {
                                        MessageBox.Show("Verify that this election is setup in DatabaseName, because the query could not find any precincts associated with this election.  Election Number: " + (sqlDR_CPCs["ElectNo"]) + " - CPC Number: " + (sqlDR_CPCs["CPC"]), " CPC Precincts", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        break;
                                    }
                                    //UNION THE PRECINCTS TOGETHER THAT MAKE UP THIS CPC// ...END
                                    #endregion


                                    //create the variables to perform DatabaseName query on ballot table
                                    clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_BallotBoundaries = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                                    Microsoft.VisualBasic.Collection colIn_BallotBoundaries = new Microsoft.VisualBasic.Collection();
                                    //setup DatabaseName query variables and parameters
                                    DB_BallotBoundaries.ConnectDatabase("DATABASENAMEHERE");
                                    colIn_BallotBoundaries.Add(sqlDR_ElectNos["ElectNo"]);
                                    colIn_BallotBoundaries.Add(sqlDR_CPCs["CPC"]);


                                    #region "Get String of All Districts in this CPC Having an Election"
                                    //LOOP THROUGH EACH CPC AND CREATE A STRING OF ALL DISTRICTS PARTICIPATION IN THIS ELECTION//  BEGIN...
                                    //this section loops through the datareader getting a string for each district that make up this CPC's election boundaries - these variables are later used when removing the districts that are in this CPC but not on this ballot//
                                    //query the ballot table, getting all precincts associated with the current cpc
                                    sqlDR_BallotBoundaries = DB_BallotBoundaries.GetData("GIS_GetBallotBoundaries", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_BallotBoundaries) as SqlDataReader;

                                    //get info on what districts are participating in the election for this precinct - for use in symetrical differnce below
                                    string strElemSchoolUniqueBdVals = "";
                                    string strHSSchoolUniqueBdVals = "";
                                    string strCityTownUniqueBdVals = "";
                                    string strTechDistUniqueBdVals = "";
                                    string strFireDistUniqueBdVals = "";
                                    string strSanitaryDistUniqueBdVals = "";
                                    string strQDistUniqueBdvals = "";
                                    bool boolElemDistInCPC = false;
                                    bool boolHSDistInCPC = false;
                                    bool boolCityTownInCPC = false;
                                    bool boolTechDistInCPC = false;
                                    bool boolFireDistInCPC = false;
                                    bool boolSanitaryDistInCPC = false;
                                    bool boolQDistInCPC = false;


                                    if (sqlDR_BallotBoundaries.HasRows)
                                    {
                                        //loop through the unique election ballot types, creating a string for all districts in this cpc that having an election
                                        while (sqlDR_BallotBoundaries.Read())
                                        {
                                            //get list of all unique elem school districts having an election in this cpc//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SCHDIST")) & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this cpc has an elem school dist having an election
                                                boolElemDistInCPC = true;

                                                //build string for symetrical differnce query below
                                                switch (sqlDR_BallotBoundaries["SCHDIST"].ToString().Length)
                                                {
                                                    case 1:
                                                        strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals + "'00" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "',";
                                                        break;
                                                    case 2:
                                                        strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals + "'0" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "',";
                                                        break;
                                                    case 3:
                                                        strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals + "'" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "',";
                                                        break;
                                                }
                                            }

                                            //get list of all unique hs school districts having an election in this cpc//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("HSCHDST")) & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this cpc has an hs school dist having an election
                                                boolHSDistInCPC = true;

                                                //build string for symetrical differnce query below
                                                switch (sqlDR_BallotBoundaries["HSCHDST"].ToString().Length)
                                                {
                                                    case 1:
                                                        strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals + "'00" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "',";
                                                        break;
                                                    case 2:
                                                        strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals + "'0" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "',";
                                                        break;
                                                    case 3:
                                                        strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals + "'" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "',";
                                                        break;
                                                }
                                            }

                                            //get list of all unique cities and towns having an election in this cpc//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("CTYDIST")) & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this cpc has a city or town, for intersect below
                                                boolCityTownInCPC = true;

                                                //build string for symetrical differnce query below
                                                strCityTownUniqueBdVals = strCityTownUniqueBdVals + "'" + sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() + "',";
                                            }

                                            //get list of all unique tech districts having an election in this cpc//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("EVITDIST")) & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this cpc has a tech dist, for intersect below
                                                boolTechDistInCPC = true;

                                                //build string for symetrical differnce query below
                                                strTechDistUniqueBdVals = strTechDistUniqueBdVals + "'" + sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() + "',";
                                            }

                                            //get list of all unique fire districts having an election in this cpc//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("FIREDIST")) & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this cpc has a fire dist, for intersect below
                                                boolFireDistInCPC = true;

                                                //build string for symetrical differnce query below
                                                strFireDistUniqueBdVals = strFireDistUniqueBdVals + "'" + sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() + "',";
                                            }

                                            //get list of all unique sanitary districts having an election in this cpc//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SANTDIST")) & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this cpc has a sanitary dist, for intersect below
                                                boolSanitaryDistInCPC = true;

                                                //build string for symetrical differnce query below
                                                strSanitaryDistUniqueBdVals = strSanitaryDistUniqueBdVals + "'" + sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() + "',";
                                            }

                                            //get list of all unique Q districts having an election in this cpc//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("BLN1DIST")) & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "0")
                                            {
                                                //check if the values in this field are Q districts, and not some other district type
                                                string strCheckForQ = "";
                                                strCheckForQ = sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim();
                                                if (strCheckForQ[0] == 'Q')
                                                {
                                                    //indicate that this cpc has a Q dist, for intersect below
                                                    boolQDistInCPC = true;

                                                    //build string for symetrical differnce query below
                                                    strQDistUniqueBdvals = strQDistUniqueBdvals + "'" + sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() + "',";
                                                }
                                                else
                                                {
                                                    //do nothing, we're only checking for Q districts
                                                }
                                                //clear the variable for reuse
                                                strCheckForQ = null;
                                            }
                                        }

                                        //remove the last character from the strings (aka: remove the comma) so it can be used in the symmetrical-difference query below
                                        if (boolElemDistInCPC == true)
                                        {
                                            strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals.TrimEnd(',');
                                        }
                                        if (boolHSDistInCPC == true)
                                        {
                                            strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals.TrimEnd(',');
                                        }
                                        if (boolCityTownInCPC == true)
                                        {
                                            strCityTownUniqueBdVals = strCityTownUniqueBdVals.TrimEnd(',');
                                        }
                                        if (boolTechDistInCPC == true)
                                        {
                                            strTechDistUniqueBdVals = strTechDistUniqueBdVals.TrimEnd(',');
                                        }
                                        if (boolFireDistInCPC == true)
                                        {
                                            strFireDistUniqueBdVals = strFireDistUniqueBdVals.TrimEnd(',');
                                        }
                                        if (boolSanitaryDistInCPC == true)
                                        {
                                            strSanitaryDistUniqueBdVals = strSanitaryDistUniqueBdVals.TrimEnd(',');
                                        }
                                        if (boolQDistInCPC == true)
                                        {
                                            strQDistUniqueBdvals = strQDistUniqueBdvals.TrimEnd(',');
                                        }
                                    }

                                    //close the data reader, so it can be reused directly below
                                    if (sqlDR_BallotBoundaries != null)
                                    {
                                        if (!sqlDR_BallotBoundaries.IsClosed)
                                        {
                                            sqlDR_BallotBoundaries.Close();
                                        }
                                        sqlDR_BallotBoundaries = null;
                                    }
                                    //LOOP THROUGH EACH PRECINT AND CREATE A STRING OF ALL DISTRICTS PARTICIPATION IN THIS ELECTION//  ...END
                                    #endregion



                                    #region "Loop Through Each Unique Ballot Boundary for this CPC - Creating a Polygon for Each Ballot Type"
                                    //LOOP THROUGH CPCs CREATING A UNIQUE POLYGON BOUNDARY FOR EACH BALLOT//  BEGIN...
                                    //query the ballot boundary table again, and loop through all the unique ballot types for the current cpc, creating a polygon for each ballot type//
                                    sqlDR_BallotBoundaries = DB_BallotBoundaries.GetData("GIS_GetBallotBoundaries", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_BallotBoundaries) as SqlDataReader;

                                    //check if there are any election boundaries that make up this cpc
                                    if (sqlDR_BallotBoundaries.HasRows)
                                    {
                                        //loop through the unique election ballot type boundaries creating a feature for each unique ballot type in this cpc
                                        while (sqlDR_BallotBoundaries.Read())
                                        {
                                            //show busy mouse
                                            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

                                            bool boolElemDistOnThisBallot = false;
                                            bool boolHSDistOnThisBallot = false;
                                            bool boolCityTownOnThisBallot = false;
                                            bool boolTechDistOnThisBallot = false;
                                            bool boolFireDistOnThisBallot = false;
                                            bool boolSanitaryOnThisBallot = false;
                                            bool boolQDistOnThisBallot = false;

                                            //create query filter for the district unions
                                            IQueryFilter pQueryFilter = new QueryFilter();

                                            ////set up the variables need for the union
                                            //IGeometryBag pGeometryBag = new GeometryBagClass();
                                            //pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                            //IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                            #region "Union All the Districts in this CPC that are having an election on this date"
                                            //check for elem school districts having an cpc in this precinct and union them together//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SCHDIST")) & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this ballot has elem school on it
                                                boolElemDistOnThisBallot = true;

                                                //add the school district polygons to the geometry bag
                                                pQueryFilter = new QueryFilter();

                                                //add the appropriate prefixes (zeros) depending on the school district number
                                                switch (sqlDR_BallotBoundaries["SCHDIST"].ToString().Length)
                                                {
                                                    case 1:
                                                        pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '00" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "%'";
                                                        break;
                                                    case 2:
                                                        pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '0" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "%'";
                                                        break;
                                                    case 3:
                                                        pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "%'";
                                                        break;
                                                    //default:
                                                    //    break;
                                                }

                                                IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                IFeature pFeature = pFeatureCursor.NextFeature();

                                                //check if the query found a feature
                                                if (pFeature == null)
                                                {
                                                    MessageBox.Show("SDE could not find the ElectionBoundaries' elem school district using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                    return;
                                                }

                                                //create geometry bag, so we can put the features (election boundaries) in the geometry bag so we can union them together
                                                IGeometryBag pGeometryBag = new GeometryBagClass();
                                                //define the geometry bag's spatial reference before adding geometries
                                                pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                while (pFeature != null)
                                                {
                                                    //simplyify before adding to geometry collection
                                                    IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                    arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                    IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                    arcPolySimplified1.SimplifyPreserveFromTo();

                                                    object missing = Type.Missing;
                                                    pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                    pFeature = pFeatureCursor.NextFeature();
                                                }

                                                //union all the elem schools boundaries (that make up this cpc) together
                                                pPolyUnionSchoolDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                //null out union variables, so we can resue them later
                                                pGeometryBag = null;
                                                pGeometryCollection = null;

                                                //null out the varibales so we can reuse them with the next district
                                                pQueryFilter = null;
                                                System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                pFeatureCursor = null;
                                                pFeature = null;
                                            }


                                            //check for high school disticts having an election in this cpc and union them together//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("HSCHDST")) & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this ballot has hs school on it
                                                boolHSDistOnThisBallot = true;

                                                //add the high school district polygons to the geometry bag
                                                pQueryFilter = new QueryFilter();

                                                //add the appropriate prefixes (zeros) depending on the school district number
                                                switch (sqlDR_BallotBoundaries["HSCHDST"].ToString().Length)
                                                {
                                                    case 1:
                                                        pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '00" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "%'";
                                                        break;
                                                    case 2:
                                                        pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '0" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "%'";
                                                        break;
                                                    case 3:
                                                        pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "%'";
                                                        break;
                                                    //default:
                                                    //    break;
                                                }

                                                IFeatureCursor pFeatureCursor = pFClassHighSchools.Search(pQueryFilter, false);
                                                IFeature pFeature = pFeatureCursor.NextFeature();

                                                //check if the query found a feature
                                                if (pFeature == null)
                                                {
                                                    MessageBox.Show("SDE could not find the ElectionBoundaries' high school district using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                    return;
                                                }

                                                //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                IGeometryBag pGeometryBag = new GeometryBagClass();
                                                //define the geometry bag's spatial reference before adding geometries
                                                pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                while (pFeature != null)
                                                {
                                                    //simplyify before adding to geometry collection
                                                    IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                    arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                    IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                    arcPolySimplified1.SimplifyPreserveFromTo();

                                                    object missing = Type.Missing;
                                                    pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                    pFeature = pFeatureCursor.NextFeature();
                                                }

                                                //union all the HS schools boundaries (that make up this cpc) together
                                                pPolyUnionHSSchoolDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                //null out union variables, so we can resue them later
                                                pGeometryBag = null;
                                                pGeometryCollection = null;

                                                //null out the varibales so we can reuse them with the next district
                                                pQueryFilter = null;
                                                System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                pFeatureCursor = null;
                                                pFeature = null;
                                            }



                                            //check for city or town districts having an election in this cpc and union them together//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("CTYDIST")) & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this ballot has a city or town on it
                                                boolCityTownOnThisBallot = true;

                                                //add the city and towns polygons to the geometry bag
                                                pQueryFilter = new QueryFilter();
                                                pQueryFilter.WhereClause = "BdType = 'C' And BdVal = '" + sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() + "'";

                                                IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                IFeature pFeature = pFeatureCursor.NextFeature();

                                                //check if the query found a feature
                                                if (pFeature == null)
                                                {
                                                    MessageBox.Show("SDE could not find the ElectionBoundaries' city or town using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                    return;
                                                }

                                                //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                IGeometryBag pGeometryBag = new GeometryBagClass();
                                                //define the geometry bag's spatial reference before adding geometries
                                                pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                while (pFeature != null)
                                                {
                                                    //simplyify before adding to geometry collection
                                                    IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                    arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                    IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                    arcPolySimplified1.SimplifyPreserveFromTo();

                                                    object missing = Type.Missing;
                                                    pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                    pFeature = pFeatureCursor.NextFeature();
                                                }

                                                //union all the city and town boundaries (that make up this cpc) together
                                                pPolyUnionCityTown.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                //null out union variables, so we can resue them later
                                                pGeometryBag = null;
                                                pGeometryCollection = null;

                                                //null out the varibales so we can reuse them with the next district
                                                pQueryFilter = null;
                                                System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                pFeatureCursor = null;
                                                pFeature = null;
                                            }
                                            else //if no bdval for city is found, then use the county, etc...
                                            {
                                                ////check if the use-county-data-when-no-city check-box is checked
                                                //if (chkCountyDataUpdate.Checked == true)
                                                //{
                                                //    //indicate that this ballot does not has a city or town on it
                                                //    boolCityTownOnThisBallot = false;

                                                    
                                                //    //create a comma delimeted string containing all the city districts in the election number
                                                //    string strAllCityDistsInElectNo = null;


                                                //    //get access to all the unique city districts having an election with this election number
                                                //    clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_GetUniqueElectDists = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                                                //    Microsoft.VisualBasic.Collection colIn_GetUniqueElectDists = new Microsoft.VisualBasic.Collection(); //i had to use this because a clsDatabaseAccessPoint argument requires a visual basic collection (until they write a c# one, i guess we will do it this way) 

                                                //    //connect to the DatabaseNameHere database
                                                //    DB_GetUniqueElectDists.ConnectDatabase("DATABASENAMEHERE");
                                                //    colIn_GetUniqueElectDists.Clear();
                                                //    colIn_GetUniqueElectDists.Add("C");
                                                //    colIn_GetUniqueElectDists.Add(sqlDR_ElectNos["ELECTNO"]);

                                                //    //query the ELECTDIST table, based on query in DATABASENAME QUERY table
                                                //    sqlDR_GetUniqueElectDists = DB_GetUniqueElectDists.GetData("GIS_GetUniqueElectDists", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_GetUniqueElectDists) as SqlDataReader;

                                                //    //check if the query returned any city districts
                                                //    if (sqlDR_GetUniqueElectDists.HasRows)
                                                //    {
                                                //        //loop through all the city districts (bdvals) having an election in this election number
                                                //        //and add them to the comma-delimited string
                                                //        while (sqlDR_GetUniqueElectDists.Read())
                                                //        {
                                                //            strAllCityDistsInElectNo = strAllCityDistsInElectNo + "'" + sqlDR_GetUniqueElectDists["DISTVAL"].ToString().Trim() + "',";
                                                //        }

                                                //        //remove the last comma in the string
                                                //        strAllCityDistsInElectNo = strAllCityDistsInElectNo.TrimEnd(',');
                                                //    }

                                                //    //create a query for the cities annex layer, getting all city districts that are not in this election number
                                                //    pQueryFilter = new QueryFilter();
                                                //    pQueryFilter.WhereClause = "BdVal not in (" + strAllCityDistsInElectNo + ")";

                                                //    IFeatureCursor pFeatureCursor = pFClassCitiesAnnex.Search(pQueryFilter, false);
                                                //    IFeature pFeature = pFeatureCursor.NextFeature();

                                                //    //check if the query found a feature
                                                //    if (pFeature == null)
                                                //    {
                                                //        MessageBox.Show("SDE could not find any CityAnnex features using the following query: " + pQueryFilter.WhereClause.ToString(), "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                //        return;
                                                //    }

                                                //    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                //    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                //    //define the geometry bag's spatial reference before adding geometries
                                                //    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                //    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                //    while (pFeature != null)
                                                //    {
                                                //        //simplyify before adding to geometry collection
                                                //        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                //        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                //        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                //        arcPolySimplified1.SimplifyPreserveFromTo();

                                                //        object missing = Type.Missing;
                                                //        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                //        pFeature = pFeatureCursor.NextFeature();
                                                //    }

                                                //    //union all the city and town boundaries (that make up this cpc) together
                                                //    pPolyUnionCityTown.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                //    //null out union variables, so we can resue them later
                                                //    pGeometryBag = null;
                                                //    pGeometryCollection = null;

                                                //    //null out the varibales so we can reuse them with the next district
                                                //    pQueryFilter = null;
                                                //    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                //    pFeatureCursor = null;
                                                //    pFeature = null;
                                                //}
                                            } //end of else where no city district was found in this ballot type
  
   


                                            //check for tech districts having an election in this cpc and union them together//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("EVITDIST")) & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this ballot has a tech dist on it
                                                boolTechDistOnThisBallot = true;

                                                //add the tech districts polygons to the geometry bag
                                                pQueryFilter = new QueryFilter();
                                                pQueryFilter.WhereClause = "BdType = 'V' And BdVal = '" + sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() + "'";

                                                IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                IFeature pFeature = pFeatureCursor.NextFeature();

                                                //check if the query found a feature
                                                if (pFeature == null)
                                                {
                                                    MessageBox.Show("SDE could not find the ElectionBoundaries' tech dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                    return;
                                                }

                                                //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                IGeometryBag pGeometryBag = new GeometryBagClass();
                                                //define the geometry bag's spatial reference before adding geometries
                                                pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                while (pFeature != null)
                                                {
                                                    //simplyify before adding to geometry collection
                                                    IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                    arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                    IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                    arcPolySimplified1.SimplifyPreserveFromTo();

                                                    object missing = Type.Missing;
                                                    pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                    pFeature = pFeatureCursor.NextFeature();
                                                }

                                                //union all the tech dist boundaries (that make up this cpc) together
                                                pPolyUnionTechDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                //null out union variables, so we can resue them later
                                                pGeometryBag = null;
                                                pGeometryCollection = null;

                                                //null out the varibales so we can reuse them with the next district
                                                pQueryFilter = null;
                                                System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                pFeatureCursor = null;
                                                pFeature = null;
                                            }


                                            //check for fire districts having an election in this cpc and union them together//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("FIREDIST")) & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this ballot has a fire dist on it
                                                boolFireDistOnThisBallot = true;

                                                //add the fire districts polygons to the geometry bag
                                                pQueryFilter = new QueryFilter();
                                                pQueryFilter.WhereClause = "BdType = 'F' And BdVal = '" + sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() + "'";

                                                IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                IFeature pFeature = pFeatureCursor.NextFeature();

                                                //check if the query found a feature
                                                if (pFeature == null)
                                                {
                                                    MessageBox.Show("SDE could not find the ElectionBoundaries' fire dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                    return;
                                                }

                                                //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                IGeometryBag pGeometryBag = new GeometryBagClass();
                                                //define the geometry bag's spatial reference before adding geometries
                                                pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                while (pFeature != null)
                                                {
                                                    //simplyify before adding to geometry collection
                                                    IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                    arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                    IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                    arcPolySimplified1.SimplifyPreserveFromTo();

                                                    object missing = Type.Missing;
                                                    pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                    pFeature = pFeatureCursor.NextFeature();
                                                }

                                                //union all the fire dist boundaries (that make up this cpc) together
                                                pPolyUnionFireDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                //null out union variables, so we can resue them later
                                                pGeometryBag = null;
                                                pGeometryCollection = null;

                                                //null out the varibales so we can reuse them with the next district
                                                pQueryFilter = null;
                                                System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                pFeatureCursor = null;
                                                pFeature = null;
                                            }


                                            //check for sanitary districts having an election in this cpc and union them together//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SANTDIST")) & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "0")
                                            {
                                                //indicate that this ballot has a sanitary dist on it
                                                boolSanitaryOnThisBallot = true;

                                                //add the sanitary districts polygons to the geometry bag
                                                pQueryFilter = new QueryFilter();
                                                pQueryFilter.WhereClause = "BdType = 'T' And BdVal = '" + sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() + "'";

                                                IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                IFeature pFeature = pFeatureCursor.NextFeature();

                                                //check if the query found a feature
                                                if (pFeature == null)
                                                {
                                                    MessageBox.Show("SDE could not find the ElectionBoundaries' sanitary dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                    return;
                                                }

                                                //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                IGeometryBag pGeometryBag = new GeometryBagClass();
                                                //define the geometry bag's spatial reference before adding geometries
                                                pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                while (pFeature != null)
                                                {
                                                    //simplyify before adding to geometry collection
                                                    IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                    arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                    IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                    arcPolySimplified1.SimplifyPreserveFromTo();

                                                    object missing = Type.Missing;
                                                    pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                    pFeature = pFeatureCursor.NextFeature();
                                                }

                                                //union all the sanitary dist boundaries (that make up this cpc) together
                                                pPolyUnionSanitaryDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                //null out union variables, so we can resue them later
                                                pGeometryBag = null;
                                                pGeometryCollection = null;

                                                //null out the varibales so we can reuse them with the next district
                                                pQueryFilter = null;
                                                System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                pFeatureCursor = null;
                                                pFeature = null;
                                            }


                                            //check for Q districts having an election in this cpc and union them together//
                                            if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("BLN1DIST")) & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "0")
                                            {
                                                //check that this field's value begins with "Q", confirming it's a Q District
                                                string strCheckForQ = "";
                                                strCheckForQ = sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim();
                                                if (strCheckForQ[0] == 'Q')
                                                {
                                                    //indicate that this ballot has a Q dist on it
                                                    boolQDistOnThisBallot = true;

                                                    //add the Q districts polygons to the geometry bag
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BdType = 'Q' And BdVal = '" + sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() + "'";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' Q dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the Q dist boundaries (that make up this cpc) together
                                                    pPolyUnionQDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }
                                            }
                                            #endregion


                                            //create a polygon to hold the ballot boundary, set the starting shape as the cpc polygon, can then be used if it the precint has no splits(aka: white ballot)
                                            IPolygon pPolyCPCElecBallotBoundary = new PolygonClass();
                                            pPolyCPCElecBallotBoundary = pPolygonCPCOutline as IPolygon;
                                            
                                            ITopologicalOperator pTopoOp;

                                            #region "Intersect All Boundaries in This CPC that are having an Election"
                                            //intersect all the participating election boundaries
                                            //if ballot has elem school dist, intersect it with the other boundaries having an election on this ballot//
                                            if (boolElemDistOnThisBallot == true)
                                            {
                                                pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator4;
                                                pTopoOp.Simplify();
                                                pPolyCPCElecBallotBoundary = pTopoOp.Intersect(pPolyUnionSchoolDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                pTopoOp = null;
                                            }

                                            //if ballot has hs school dist, intersect it with the other boundaries having an election on this ballot//
                                            if (boolHSDistOnThisBallot == true)
                                            {
                                                pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator4;
                                                pTopoOp.Simplify();
                                                pPolyCPCElecBallotBoundary = pTopoOp.Intersect(pPolyUnionHSSchoolDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                pTopoOp = null;
                                            }

                                            //if ballot has city or town boundary, intersect it with the other boundaries having an election on this ballot//
                                            if (boolCityTownOnThisBallot == true)
                                            {
                                                pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator4;
                                                pTopoOp.Simplify();
                                                pPolyCPCElecBallotBoundary = pTopoOp.Intersect(pPolyUnionCityTown as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                pTopoOp = null;
                                            }

                                            //if ballot has tech dist, intersect it with the other boundaries having an election on this ballot//
                                            if (boolTechDistOnThisBallot == true)
                                            {
                                                pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator4;
                                                pTopoOp.Simplify();
                                                pPolyCPCElecBallotBoundary = pTopoOp.Intersect(pPolyUnionTechDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                pTopoOp = null;
                                            }

                                            //if ballot has fire dist, intersect it with the other boundaries having an election on this ballot//
                                            if (boolFireDistOnThisBallot == true)
                                            {
                                                pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator4;
                                                pTopoOp.Simplify();
                                                pPolyCPCElecBallotBoundary = pTopoOp.Intersect(pPolyUnionFireDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                pTopoOp = null;
                                            }

                                            //if ballot has sanitary dist, intersect it with the other boundaries having an election on this ballot//
                                            if (boolSanitaryOnThisBallot == true)
                                            {
                                                pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator4;
                                                pTopoOp.Simplify();
                                                pPolyCPCElecBallotBoundary = pTopoOp.Intersect(pPolyUnionSanitaryDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                pTopoOp = null;
                                            }

                                            //if ballot has Q dist, intersect it with the other boundaries having an election on this ballot//
                                            if (boolQDistOnThisBallot == true)
                                            {
                                                pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator4;
                                                pTopoOp.Simplify();
                                                pPolyCPCElecBallotBoundary = pTopoOp.Intersect(pPolyUnionQDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                pTopoOp = null;
                                            }
                                            #endregion


                                            //REMOVE DISTRICTS THAT ARE NOT ON THIS BALLOT//
                                            #region "Remove the Districts that are not on this ballot but are in this CPC"
                                            //this section of code removes (via symetric differnce) the districts that are not on this ballot (but ARE having an election in this cpc), creating -as a result- the final ballot boundary polygon
            
                                                //REMOVE ELEM SCHOOLS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                if (boolElemDistOnThisBallot == false & boolElemDistInCPC == true)
                                                {
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BDTYPE = 'S' AND BDVAL in (" + strElemSchoolUniqueBdVals.Trim() + ")";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' elem school districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the elem school boundaries (that make up this cpc) together
                                                    pPolyUnionSchoolDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //intersect the bounary to be removed, with the current cpc
                                                    pTopoOp = pPolyUnionSchoolDistRemove as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyUnionSchoolDistRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                    pTopoOp = null;

                                                    //remove them from the ballot polygon
                                                    pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                    pTopoOp.Simplify();
                                                    pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionSchoolDistRemove as IGeometry) as IPolygon;
                                                    pTopoOp = null;

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //REMOVE HIGH SCHOOLS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                if (boolHSDistOnThisBallot == false & boolHSDistInCPC == true)
                                                {
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BDTYPE = 'S' AND BDVAL in (" + strHSSchoolUniqueBdVals.Trim() + ")";

                                                    IFeatureCursor pFeatureCursor = pFClassHighSchools.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' high school districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the high school dist boundaries (that make up this cpc) together
                                                    pPolyUnionHSSchoolDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //intersect the bounary to be removed, with the current cpc
                                                    pTopoOp = pPolyUnionHSSchoolDistRemove as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyUnionHSSchoolDistRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                    pTopoOp = null;

                                                    //remove them from the ballot polygon
                                                    pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                    pTopoOp.Simplify();
                                                    pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionHSSchoolDistRemove as IGeometry) as IPolygon;
                                                    pTopoOp = null;

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //REMOVE CITIES AND TOWNS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                if (chkCountyDataUpdate.Checked == true)
                                                {
                                                    if (boolCityTownOnThisBallot == false) //aka this ballot does not have a city
                                                    {
                                                        //check if there are any cities having an election with this election number, and if so remove all of them from the ballot boundary (not just the ones in this cpc as it does if the checkbox is not checked - in the else statement below)

                                                        //create a comma delimeted string containing all the city districts in the election number
                                                        string strAllCityDistsInElectNo = null;


                                                        //get access to all the unique city districts having an election with this election number
                                                        clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_GetUniqueElectDists = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                                                        Microsoft.VisualBasic.Collection colIn_GetUniqueElectDists = new Microsoft.VisualBasic.Collection(); //i had to use this because a clsDatabaseAccessPoint argument requires a visual basic collection (until they write a c# one, i guess we will do it this way) 

                                                        //connect to the DatabaseNameHere database
                                                        DB_GetUniqueElectDists.ConnectDatabase("DATABASENAMEHERE");
                                                        colIn_GetUniqueElectDists.Clear();
                                                        colIn_GetUniqueElectDists.Add("C");
                                                        colIn_GetUniqueElectDists.Add(sqlDR_ElectNos["ELECTNO"]);

                                                        //query the ELECTDIST table, based on query in DATABASENAME QUERY table
                                                        sqlDR_GetUniqueElectDists = DB_GetUniqueElectDists.GetData("GIS_GetUniqueElectDists", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_GetUniqueElectDists) as SqlDataReader;

                                                        //check if the query returned any city districts
                                                        if (sqlDR_GetUniqueElectDists.HasRows)
                                                        {
                                                            //loop through all the city districts (bdvals) having an election in this election number
                                                            //and add them to the comma-delimited string
                                                            while (sqlDR_GetUniqueElectDists.Read())
                                                            {
                                                                strAllCityDistsInElectNo = strAllCityDistsInElectNo + "'" + sqlDR_GetUniqueElectDists["DISTVAL"].ToString().Trim() + "',";
                                                            }

                                                            //remove the last comma in the string
                                                            strAllCityDistsInElectNo = strAllCityDistsInElectNo.TrimEnd(',');

                                                            //set up the query filter
                                                            pQueryFilter = new QueryFilter();
                                                            pQueryFilter.WhereClause = "BDTYPE = 'C' AND BDVAL in (" + strAllCityDistsInElectNo + ")";

                                                            //query the election boundaries
                                                            IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                            IFeature pFeature = pFeatureCursor.NextFeature();

                                                            //check if the query found a feature
                                                            if (pFeature == null)
                                                            {
                                                                MessageBox.Show("SDE could not find the ElectionBoundaries' cities and towns using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                                return;
                                                            }

                                                            //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                            IGeometryBag pGeometryBag = new GeometryBagClass();
                                                            //define the geometry bag's spatial reference before adding geometries
                                                            pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                            IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                            while (pFeature != null)
                                                            {
                                                                //simplyify before adding to geometry collection
                                                                IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                                arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                                IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                                arcPolySimplified1.SimplifyPreserveFromTo();

                                                                object missing = Type.Missing;
                                                                pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                                pFeature = pFeatureCursor.NextFeature();
                                                            }

                                                            //union all the cities and towns boundaries (that make up this cpc) together
                                                            pPolyUnionCityTownRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                            //intersect the bounary to be removed, with the current cpc
                                                            pTopoOp = pPolyUnionCityTownRemove as ITopologicalOperator4;
                                                            pTopoOp.Simplify();
                                                            pPolyUnionCityTownRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                            pTopoOp = null;

                                                            //remove them from the ballot polygon
                                                            pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                            pTopoOp.Simplify();
                                                            pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionCityTownRemove as IGeometry) as IPolygon;
                                                            pTopoOp = null;

                                                            //null out union variables, so we can resue them later
                                                            pGeometryBag = null;
                                                            pGeometryCollection = null;

                                                            //null out the varibales so we can reuse them with the next district
                                                            pQueryFilter = null;
                                                            System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                            pFeatureCursor = null;
                                                            pFeature = null;

                                                            //close the data reader, so it can reused with next ballot type
                                                            if (sqlDR_GetUniqueElectDists != null)
                                                            {
                                                                if (!sqlDR_GetUniqueElectDists.IsClosed)
                                                                {
                                                                    sqlDR_GetUniqueElectDists.Close();
                                                                }
                                                                sqlDR_GetUniqueElectDists = null;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //do nothing because there are no cities having an election with this election number
                                                        }
                                                    }
                                                }
                                                else //the check-box on the form is not checked
                                                {
                                                    if (boolCityTownOnThisBallot == false & boolCityTownInCPC == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'C' AND BDVAL in (" + strCityTownUniqueBdVals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' cities and towns using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the cities and towns boundaries (that make up this cpc) together
                                                        pPolyUnionCityTownRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current cpc
                                                        pTopoOp = pPolyUnionCityTownRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionCityTownRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionCityTownRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }
                                                }





                                                //REMOVE TECH DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                if (boolTechDistOnThisBallot == false & boolTechDistInCPC == true)
                                                {
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BDTYPE = 'V' AND BDVAL in (" + strTechDistUniqueBdVals.Trim() + ")";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' tech districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the tech dist boundaries (that make up this cpc) together
                                                    pPolyUnionTechDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //intersect the bounary to be removed, with the current cpc
                                                    pTopoOp = pPolyUnionTechDistRemove as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyUnionTechDistRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                    pTopoOp = null;

                                                    //remove them from the ballot polygon
                                                    pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                    pTopoOp.Simplify();
                                                    pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionTechDistRemove as IGeometry) as IPolygon;
                                                    pTopoOp = null;

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //REMOVE FIRE DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                if (boolFireDistOnThisBallot == false & boolFireDistInCPC == true)
                                                {
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BDTYPE = 'F' AND BDVAL in (" + strFireDistUniqueBdVals.Trim() + ")";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' fire districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the tech dist boundaries (that make up this cpc) together
                                                    pPolyUnionFireDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //intersect the bounary to be removed, with the current cpc
                                                    pTopoOp = pPolyUnionFireDistRemove as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyUnionFireDistRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                    pTopoOp = null;

                                                    //remove them from the ballot polygon
                                                    pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                    pTopoOp.Simplify();
                                                    pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionFireDistRemove as IGeometry) as IPolygon;
                                                    pTopoOp = null;

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //REMOVE SANITARY DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                if (boolSanitaryOnThisBallot == false & boolSanitaryDistInCPC == true)
                                                {
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BDTYPE = 'T' AND BDVAL in (" + strSanitaryDistUniqueBdVals.Trim() + ")";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' sanitary districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the sanitary dist boundaries (that make up this cpc) together
                                                    pPolyUnionSanitaryDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //intersect the bounary to be removed, with the current cpc
                                                    pTopoOp = pPolyUnionSanitaryDistRemove as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyUnionSanitaryDistRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                    pTopoOp = null;

                                                    //remove them from the ballot polygon
                                                    pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                    pTopoOp.Simplify();
                                                    pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionSanitaryDistRemove as IGeometry) as IPolygon;
                                                    pTopoOp = null;

                                                    //null out union variables, so we can reuse them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the variables so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //REMOVE Q DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                if (boolQDistOnThisBallot == false & boolQDistOnThisBallot == true)
                                                {
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BDTYPE = 'Q' AND BDVAL in (" + strQDistUniqueBdvals.Trim() + ")";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' Q-Districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the Q dist boundaries (that make up this cpc) together
                                                    pPolyUnionQDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //intersect the bounary to be removed, with the current cpc
                                                    pTopoOp = pPolyUnionQDistRemove as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyUnionQDistRemove = pTopoOp.Intersect(pPolyCPCElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                    pTopoOp = null;

                                                    //remove them from the ballot polygon
                                                    pTopoOp = pPolyCPCElecBallotBoundary as ITopologicalOperator;
                                                    pTopoOp.Simplify();
                                                    pPolyCPCElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionQDistRemove as IGeometry) as IPolygon;
                                                    pTopoOp = null;

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }
                                            #endregion


                                            //add the final polygon shape to ballot-boundary SDE feature class
                                                IFeature pFeatureBallotBoundary = pFClassBallotBoundaries.CreateFeature();

                                            //populate the new feature's fields
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("ELECTNO"), sqlDR_BallotBoundaries["ELECTNO"].ToString().Trim());
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("ELECTDATE"), cboCPCElections.Text);
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("COLOR"), sqlDR_BallotBoundaries["COLOR"].ToString().Trim());
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SPLITID"), sqlDR_BallotBoundaries["SPLITID"].ToString().Trim());
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("ELECTPCT"), sqlDR_BallotBoundaries["ELECTPCT"].ToString().Trim());
                                            //if zero in DatabaseName, add blank field in arc feature
                                            if (sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() == "0")
                                            {
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SCHDIST"), "");
                                            }
                                            else
                                            {
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SCHDIST"), sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim());
                                            }
                                            //if zero in DatabaseName, add blank field in arc feature
                                            if (sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() == "0")
                                            {
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("HSCHDST"), "");
                                            }
                                            else
                                            {
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("HSCHDST"), sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim());
                                            }
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("CTYDIST"), sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim());
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("EVITDIST"), sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim());
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("FIREDIST"), sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim());
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("VOTRTOT"), sqlDR_BallotBoundaries["VOTRTOT"].ToString().Trim());
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SANTDIST"), sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim());
                                            //check to make sure the value in this DatabaseName record contains a Q-District, if so, then add the value from this field to the new feature
                                            if (boolQDistOnThisBallot == true)
                                            {
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("BLN1DIST"), sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim());
                                            }
                                            pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("DateCreated"), DateAndTime.Now);


                                            //save and store the new feature
                                            pFeatureBallotBoundary.Shape = pPolyCPCElecBallotBoundary;
                                            pFeatureBallotBoundary.Store();

                                        } //end of loop through the unique ballot types - while (sqlDR_BallotBoundaries.Read())

                                        //close the data reader, so it can reused with next ballot type
                                        if (sqlDR_BallotBoundaries != null)
                                        {
                                            if (!sqlDR_BallotBoundaries.IsClosed)
                                            {
                                                sqlDR_BallotBoundaries.Close();
                                            }
                                            sqlDR_BallotBoundaries = null;
                                        }

                                    } //end of - if (sqlDR_BallotBoundaries.HasRows)
                                    #endregion


                                    //clear out some viariables so they can be reused in the next cpc
                                    if (pPolyUnionSchoolDist != null)
                                    {
                                        pPolyUnionSchoolDist = null;
                                    }
                                    if (pPolyUnionHSSchoolDist != null)
                                    {
                                        pPolyUnionHSSchoolDist = null;
                                    }
                                    if (pPolyUnionCityTown != null)
                                    {
                                        pPolyUnionCityTown = null;
                                    }
                                    if (pPolyUnionTechDist != null)
                                    {
                                        pPolyUnionTechDist = null;
                                    }
                                    if (pPolyUnionFireDist != null)
                                    {
                                        pPolyUnionFireDist = null;
                                    }
                                    if (pPolyUnionSanitaryDist != null)
                                    {
                                        pPolyUnionSanitaryDist = null;
                                    }
                                    if (pPolyUnionQDist != null)
                                    {
                                        pPolyUnionQDist = null;
                                    }
                                    if (pPolyUnionSchoolDistRemove != null)
                                    {
                                        pPolyUnionSchoolDistRemove = null;
                                    }
                                    if (pPolyUnionHSSchoolDistRemove != null)
                                    {
                                        pPolyUnionHSSchoolDistRemove = null;
                                    }
                                    if (pPolyUnionCityTownRemove != null)
                                    {
                                        pPolyUnionCityTownRemove = null;
                                    }
                                    if (pPolyUnionTechDistRemove != null)
                                    {
                                        pPolyUnionTechDistRemove = null;
                                    }
                                    if (pPolyUnionFireDistRemove != null)
                                    {
                                        pPolyUnionFireDistRemove = null;
                                    }
                                    if (pPolyUnionSanitaryDistRemove != null)
                                    {
                                        pPolyUnionSanitaryDistRemove = null;
                                    }
                                    if (pPolyUnionQDistRemove != null)
                                    {
                                        pPolyUnionQDistRemove = null;
                                    }

                                } //end of loop-through-the-cpc-list  

                        } //end of if statement - election is a cpc election
                        #endregion
                        //END OF CPC ELECTION CODE//  ..END


                        //IT'S A GENERAL ELECTION//  BEGIN...
                        #region "General Election Code"
                        else //this code will only get run if it's a general election, using all voting precincts - b/c the associated if-statement could not find any records in the newelectcpc table (no cpcs)
                        {
                            //loop through each vp, querying the bcrdclcd table with the using the vp number and the election date
                            //create a seperate feature for each of the ballot types for each vp (make feature for white as well as it shows the participating districts for that vp on that ballot)

                            //connect to the DATABASENAMEHERE database and get the list of precincts associated with this election number
                            clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_GenElecPcts = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                            Microsoft.VisualBasic.Collection colIn_GenElecPcts = new Microsoft.VisualBasic.Collection(); 

                            DB_GenElecPcts.ConnectDatabase("DATABASENAMEHERE");
                            colIn_GenElecPcts.Clear();
                            colIn_GenElecPcts.Add(sqlDR_ElectNos["ELECTNO"]);

                            //query the BCRDCLCD table, getting precincts for this election
                            sqlDR_GenElecPcts = DB_GenElecPcts.GetData("GIS_GetGenElecPctList", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_GenElecPcts) as SqlDataReader;

                            //LOOP THROUGH EACH PRECINCT IN THIS ELECTION//
                            //check if this election is set up in the BCRDCLCD table: aka- if it has rows
                            if (sqlDR_GenElecPcts.HasRows)
                            {
                                //loop through each precinct and create a feature for each ballot type in that precinct
                                while (sqlDR_GenElecPcts.Read())
                                {
                                    //check for null values in the electpct field in the bcrdclcd DatabaseName table - this can later be deleted, there are a few records without a precint
                                    //according to JStewart this should not happen again, it's a few voters that do not have a precint
                                    if (sqlDR_GenElecPcts["electpct"].ToString().Trim() != "")
                                    {
                                        //show busy mouse
                                        System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

                                        ITopologicalOperator4 pPolyUnionSchoolDist = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionHSSchoolDist = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionCityTown = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionTechDist = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionFireDist = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionSanitaryDist = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionQDist = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionSchoolDistRemove = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionHSSchoolDistRemove = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionCityTownRemove = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionTechDistRemove = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionFireDistRemove = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionSanitaryDistRemove = new PolygonClass();
                                        ITopologicalOperator4 pPolyUnionQDistRemove = new PolygonClass();

                                        //get the polygon feature from DatabaseNameHere for this precinct - for use in the intersect with all the ballot boundaries below
                                        //create query filter for the voting precincts
                                        IQueryFilter pQueryFilter = new QueryFilter();
                                        pQueryFilter.WhereClause = "BDVAL = '" + sqlDR_GenElecPcts["electpct"].ToString().Trim() + "'";

                                        //query the voting precincts feature class
                                        IFeatureCursor pFeatCursor_GenPcts = pFClassVotingPrecincts.Search(pQueryFilter, false);

                                        //get the current precinct
                                        IFeature pFeatGenElecPct = pFeatCursor_GenPcts.NextFeature();

                                        //check if the query found a feature
                                        if (pFeatGenElecPct == null)
                                        {
                                            MessageBox.Show("SDE could not find a Voting Precinct in the voting precinct layer using the following query: " + pQueryFilter.WhereClause.ToString() + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                            return;
                                        }

                                        //null out the query filter for reuse below
                                        pQueryFilter = null;

                                        //get all the ballot boundaries that make up this precinct
                                        clsDatabaseAccessPoint.clsDatabaseAccessPoint DB_BallotBoundaries = new clsDatabaseAccessPoint.clsDatabaseAccessPoint();
                                        Microsoft.VisualBasic.Collection colIn_BallotBoundaries = new Microsoft.VisualBasic.Collection();

                                        DB_BallotBoundaries.ConnectDatabase("DATABASENAMEHERE");
                                        colIn_BallotBoundaries.Add(sqlDR_ElectNos["ElectNo"]);
                                        colIn_BallotBoundaries.Add(sqlDR_GenElecPcts["electpct"]);


                                        #region "Get String of All Districts in this Precinct Having an Election"
                                        //LOOP THROUGH EACH PRECINT AND CREATE A STRING OF ALL DISTRICTS PARTICIPATION IN THIS ELECTION//  BEGIN...
                                        //this section loops through the datareader getting a string for each district that make up this precinct's election boundaries - these variables are later used when removing the districts that are in this precinct but not on this ballot//
                                        //query the ballot table, getting all precincts associated with the current precinct
                                        sqlDR_BallotBoundaries = DB_BallotBoundaries.GetData("GIS_GetBallotBoundaries", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_BallotBoundaries) as SqlDataReader;

                                        //get info on what districts are participating in the election for this precinct - for use in symetrical differnce below
                                        string strElemSchoolUniqueBdVals = "";
                                        string strHSSchoolUniqueBdVals = "";
                                        string strCityTownUniqueBdVals = "";
                                        string strTechDistUniqueBdVals = "";
                                        string strFireDistUniqueBdVals = "";
                                        string strSanitaryDistUniqueBdVals = "";
                                        string strQDistUniqueBdvals = "";
                                        bool boolElemDistInPct = false;
                                        bool boolHSDistInPct = false;
                                        bool boolCityTownInPct = false;
                                        bool boolTechDistInPct = false;
                                        bool boolFireDistInPct = false;
                                        bool boolSanitaryDistInPct = false;
                                        bool boolQDistInPct = false;


                                        if (sqlDR_BallotBoundaries.HasRows)
                                        {
                                            //loop through the unique election ballot types, creating a string for all districts in this precinct that having an election
                                            while (sqlDR_BallotBoundaries.Read())
                                            {
                                                //get list of all unique elem school districts having an election in this precinct//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SCHDIST")) & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this precinct has an elem school dist having an election
                                                    boolElemDistInPct = true;

                                                    //build string for symetrical differnce query below
                                                    switch (sqlDR_BallotBoundaries["SCHDIST"].ToString().Length)
                                                    {
                                                        case 1:
                                                            strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals + "'00" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "',";
                                                            break;
                                                        case 2:
                                                            strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals + "'0" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "',";
                                                            break;
                                                        case 3:
                                                            strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals + "'" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "',";
                                                            break;
                                                    }
                                                }

                                                //get list of all unique hs school districts having an election in this precinct//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("HSCHDST")) & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this precinct has an hs school dist having an election
                                                    boolHSDistInPct = true;

                                                    //build string for symetrical differnce query below
                                                    switch (sqlDR_BallotBoundaries["HSCHDST"].ToString().Length)
                                                    {
                                                        case 1:
                                                            strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals + "'00" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "',";
                                                            break;
                                                        case 2:
                                                            strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals + "'0" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "',";
                                                            break;
                                                        case 3:
                                                            strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals + "'" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "',";
                                                            break;
                                                    }
                                                }

                                                //get list of all unique cities and towns having an election in this precinct//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("CTYDIST")) & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this precinct has a city or town, for intersect below
                                                    boolCityTownInPct = true;

                                                    //build string for symetrical differnce query below
                                                    strCityTownUniqueBdVals = strCityTownUniqueBdVals + "'" + sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() + "',";
                                                }

                                                //get list of all unique tech districts having an election in this precinct//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("EVITDIST")) & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this precinct has a tech dist, for intersect below
                                                    boolTechDistInPct = true;

                                                    //build string for symetrical differnce query below
                                                    strTechDistUniqueBdVals = strTechDistUniqueBdVals + "'" + sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() + "',";
                                                }

                                                //get list of all unique fire districts having an election in this precinct//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("FIREDIST")) & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this precinct has a fire dist, for intersect below
                                                    boolFireDistInPct = true;

                                                    //build string for symetrical differnce query below
                                                    strFireDistUniqueBdVals = strFireDistUniqueBdVals + "'" + sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() + "',";
                                                }

                                                //get list of all unique sanitary districts having an election in this precinct//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SANTDIST")) & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this precinct has a sanitary dist, for intersect below
                                                    boolSanitaryDistInPct = true;

                                                    //build string for symetrical differnce query below
                                                    strSanitaryDistUniqueBdVals = strSanitaryDistUniqueBdVals + "'" + sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() + "',";
                                                }

                                                //get list of all unique Q districts having an election in this precinct//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("BLN1DIST")) & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "0")
                                                {
                                                    //check if the values in this field are Q districts, and not some other district type
                                                    string strCheckForQ = "";
                                                    strCheckForQ = sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim();
                                                    if (strCheckForQ[0] == 'Q')
                                                    {
                                                        //indicate that this precinct has a Q dist, for intersect below
                                                        boolQDistInPct = true;

                                                        //build string for symetrical differnce query below
                                                        strQDistUniqueBdvals = strQDistUniqueBdvals + "'" + sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() + "',";
                                                    }
                                                    else
                                                    {
                                                        //do nothing, we're only checking for Q districts
                                                    }
                                                    //clear the variable for reuse
                                                    strCheckForQ = null;
                                                }
                                            }

                                            //remove the last character from the strings(aka: remove the comma) so it can be used in the symetrical-differnce query below
                                            if (boolElemDistInPct == true)
                                            {
                                                strElemSchoolUniqueBdVals = strElemSchoolUniqueBdVals.TrimEnd(',');
                                            }
                                            if (boolHSDistInPct == true)
                                            {
                                                strHSSchoolUniqueBdVals = strHSSchoolUniqueBdVals.TrimEnd(',');
                                            }
                                            if (boolCityTownInPct == true)
                                            {
                                                strCityTownUniqueBdVals = strCityTownUniqueBdVals.TrimEnd(',');
                                            }
                                            if (boolTechDistInPct == true)
                                            {
                                                strTechDistUniqueBdVals = strTechDistUniqueBdVals.TrimEnd(',');
                                            }
                                            if (boolFireDistInPct == true)
                                            {
                                                strFireDistUniqueBdVals = strFireDistUniqueBdVals.TrimEnd(',');
                                            }
                                            if (boolSanitaryDistInPct == true)
                                            {
                                                strSanitaryDistUniqueBdVals = strSanitaryDistUniqueBdVals.TrimEnd(',');
                                            }
                                            if (boolQDistInPct == true)
                                            {
                                                strQDistUniqueBdvals = strQDistUniqueBdvals.TrimEnd(',');
                                            }
                                        }

                                        //close the data reader, so it can reused directly below
                                        if (sqlDR_BallotBoundaries != null)
                                        {
                                            if (!sqlDR_BallotBoundaries.IsClosed)
                                            {
                                                sqlDR_BallotBoundaries.Close();
                                            }
                                            sqlDR_BallotBoundaries = null;
                                        }
                                        //LOOP THROUGH EACH PRECINT AND CREATE A STRING OF ALL DISTRICTS PARTICIPATION IN THIS ELECTION//  ...END
                                        #endregion


                                        //LOOP THROUGH EACH UNIQUE BALLOT FOR THE CURRENT PRECINCT//  BEGIN...
                                        //this section loops through the data reader again using the same query, this time creating a unique feature for each ballot type in this precinct
                                        
                                        //sqlDR_BallotBoundaries = DB_BallotBoundaries.GetData("GIS_GetBallotBoundaries", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_BallotBoundaries) as SqlDataReader;
                                        //this query (GIS_GetBallotBoundaries2) excludes the platinum ballot stripe (I guess the one we can ignore because they are federal only voters)
                                        sqlDR_BallotBoundaries = DB_BallotBoundaries.GetData("GIS_GetBallotBoundaries2", clsDatabaseAccessPoint.clsDatabaseAccessPoint.Read, colIn_BallotBoundaries) as SqlDataReader;

                                        //check if there are any election boundaries that contribute to this precinct
                                        if (sqlDR_BallotBoundaries.HasRows)
                                        {
                                            //loop through the unique election ballot type boundaries creating a feature for each unique ballot type in this precinct
                                            while (sqlDR_BallotBoundaries.Read())
                                            {
                                                //show busy mouse
                                                System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

                                                bool boolElemDistOnThisBallot = false;
                                                bool boolHSDistOnThisBallot = false;
                                                bool boolCityTownOnThisBallot = false;
                                                bool boolTechDistOnThisBallot = false;
                                                bool boolFireDistOnThisBallot = false;
                                                bool boolSanitaryOnThisBallot = false;
                                                bool boolQDistOnThisBallot = false;


                                                //check for elem school districts having an election in this precinct and union them together//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SCHDIST")) & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this ballot has elem school on it
                                                    boolElemDistOnThisBallot = true;

                                                    //add the school district polygons to the geometry bag
                                                    pQueryFilter = new QueryFilter();

                                                    //add the appropriate prefixes (zeros) depending on the school district number
                                                    switch (sqlDR_BallotBoundaries["SCHDIST"].ToString().Length)
                                                    {
                                                        case 1:
                                                            pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '00" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "%'";
                                                            break;
                                                        case 2:
                                                            pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '0" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "%'";
                                                            break;
                                                        case 3:
                                                            pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '" + sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() + "%'";
                                                            break;
                                                        //default:
                                                        //    break;
                                                    }

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' elem school district using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the elem schools boundaries (that make up this precinct) together
                                                    pPolyUnionSchoolDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //check for high school disticts having an election in this precinct and union them together//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("HSCHDST")) & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this ballot has hs school on it
                                                    boolHSDistOnThisBallot = true;

                                                    //add the high school district polygons to the geometry bag
                                                    pQueryFilter = new QueryFilter();

                                                    //add the appropriate prefixes (zeros) depending on the school district number
                                                    switch (sqlDR_BallotBoundaries["HSCHDST"].ToString().Length)
                                                    {
                                                        case 1:
                                                            pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '00" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "%'";
                                                            break;
                                                        case 2:
                                                            pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '0" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "%'";
                                                            break;
                                                        case 3:
                                                            pQueryFilter.WhereClause = "BdType = 'S' And BdVal like '" + sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() + "%'";
                                                            break;
                                                        //default:
                                                        //    break;
                                                    }

                                                    IFeatureCursor pFeatureCursor = pFClassHighSchools.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' high school district using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the HS schools boundaries (that make up this precinct) together
                                                    pPolyUnionHSSchoolDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //check for city or town districts having an election in this precinct and union them together//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("CTYDIST")) & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this ballot has a city or town on it
                                                    boolCityTownOnThisBallot = true;

                                                    //add the city and towns polygons to the geometry bag
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BdType = 'C' And BdVal = '" + sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim() + "'";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' city or town using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the city and town boundaries (that make up this precinct) together
                                                    pPolyUnionCityTown.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //check for tech districts having an election in this precinct and union them together//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("EVITDIST")) & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this ballot has a tech dist on it
                                                    boolTechDistOnThisBallot = true;

                                                    //add the tech districts polygons to the geometry bag
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BdType = 'V' And BdVal = '" + sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim() + "'";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' tech dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the tech dist boundaries (that make up this precinct) together
                                                    pPolyUnionTechDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //check for fire districts having an election in this precinct and union them together//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("FIREDIST")) & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this ballot has a fire dist on it
                                                    boolFireDistOnThisBallot = true;

                                                    //add the fire districts polygons to the geometry bag
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BdType = 'F' And BdVal = '" + sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim() + "'";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' fire dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the fire dist boundaries (that make up this precinct) together
                                                    pPolyUnionFireDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //check for sanitary districts having an election in this precinct and union them together//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("SANTDIST")) & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() != "0")
                                                {
                                                    //indicate that this ballot has a sanitary dist on it
                                                    boolQDistOnThisBallot = true;

                                                    //add the sanitary districts polygons to the geometry bag
                                                    pQueryFilter = new QueryFilter();
                                                    pQueryFilter.WhereClause = "BdType = 'T' And BdVal = '" + sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim() + "'";

                                                    IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                    IFeature pFeature = pFeatureCursor.NextFeature();

                                                    //check if the query found a feature
                                                    if (pFeature == null)
                                                    {
                                                        MessageBox.Show("SDE could not find the ElectionBoundaries' sanitary dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }

                                                    //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                    IGeometryBag pGeometryBag = new GeometryBagClass();
                                                    //define the geometry bag's spatial reference before adding geometries
                                                    pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                    IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                    while (pFeature != null)
                                                    {
                                                        //simplyify before adding to geometry collection
                                                        IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                        arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                        IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                        arcPolySimplified1.SimplifyPreserveFromTo();

                                                        object missing = Type.Missing;
                                                        pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                        pFeature = pFeatureCursor.NextFeature();
                                                    }

                                                    //union all the sanitary dist boundaries (that make up this precinct) together
                                                    pPolyUnionSanitaryDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                    //null out union variables, so we can resue them later
                                                    pGeometryBag = null;
                                                    pGeometryCollection = null;

                                                    //null out the varibales so we can reuse them with the next district
                                                    pQueryFilter = null;
                                                    System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                    pFeatureCursor = null;
                                                    pFeature = null;
                                                }


                                                //check for Q districts having an election in this precinct and union them together//
                                                if (!sqlDR_BallotBoundaries.IsDBNull(sqlDR_BallotBoundaries.GetOrdinal("BLN1DIST")) & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "" & sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() != "0")
                                                {
                                                    //check that this field's value begins with "Q", confirming it's a Q District
                                                    string strCheckForQ = "";
                                                    strCheckForQ = sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim();
                                                    if (strCheckForQ[0] == 'Q')
                                                    {
                                                        //indicate that this ballot has a Q dist on it
                                                        boolQDistOnThisBallot = true;

                                                        //add the Q districts polygons to the geometry bag
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BdType = 'Q' And BdVal = '" + sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim() + "'";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' Q dist using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a variable passed in from DATABASENAME Ballot Table.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the Q dist boundaries (that make up this precinct) together
                                                        pPolyUnionQDist.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }
                                                }


                                                //create a polygon to hold the ballot boundary, set the starting shape as the precinct polygon, can then be used if it the precint has no splits(aka: white ballot)
                                                IPolygon pPolyGenElecBallotBoundary = new PolygonClass();
                                                pPolyGenElecBallotBoundary = pFeatGenElecPct.Shape as IPolygon;

                                                ITopologicalOperator pTopoOp;


                                                #region "Intersect All the Boundaries that are on this Ballot"
                                                //intersect all the participating election boundaries
                                                //if ballot has elem school dist, intersect it with the other boundaries having an election on this ballot//
                                                if (boolElemDistOnThisBallot == true)
                                                {
                                                    pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyGenElecBallotBoundary = pTopoOp.Intersect(pPolyUnionSchoolDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                    pTopoOp = null;
                                                }

                                                //if ballot has hs school dist, intersect it with the other boundaries having an election on this ballot//
                                                if (boolHSDistOnThisBallot == true)
                                                {
                                                    pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyGenElecBallotBoundary = pTopoOp.Intersect(pPolyUnionHSSchoolDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                    pTopoOp = null;
                                                }

                                                //if ballot has city or town boundary, intersect it with the other boundaries having an election on this ballot//
                                                if (boolCityTownOnThisBallot == true)
                                                {
                                                    pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyGenElecBallotBoundary = pTopoOp.Intersect(pPolyUnionCityTown as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                    pTopoOp = null;
                                                }

                                                //if ballot has tech dist, intersect it with the other boundaries having an election on this ballot//
                                                if (boolTechDistOnThisBallot == true)
                                                {
                                                    pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyGenElecBallotBoundary = pTopoOp.Intersect(pPolyUnionTechDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                    pTopoOp = null;
                                                }

                                                //if ballot has fire dist, intersect it with the other boundaries having an election on this ballot//
                                                if (boolFireDistOnThisBallot == true)
                                                {
                                                    pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyGenElecBallotBoundary = pTopoOp.Intersect(pPolyUnionFireDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                    pTopoOp = null;
                                                }

                                                //if ballot has sanitary dist, intersect it with the other boundaries having an election on this ballot//
                                                if (boolSanitaryOnThisBallot == true)
                                                {
                                                    pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyGenElecBallotBoundary = pTopoOp.Intersect(pPolyUnionSanitaryDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                    pTopoOp = null;
                                                }

                                                //if ballot has Q dist, intersect it with the other boundaries having an election on this ballot//
                                                if (boolQDistOnThisBallot == true)
                                                {
                                                    pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator4;
                                                    pTopoOp.Simplify();
                                                    pPolyGenElecBallotBoundary = pTopoOp.Intersect(pPolyUnionQDist as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as IPolygon;
                                                    pTopoOp = null;
                                                }
                                                #endregion


                                                //REMOVE DISTRICTS THAT ARE NOT ON THIS BALLOT//
                                                #region "Remove Districts that are not on this ballot but are in the Election"
                                                //this section of code removes (via symetric differnce) the districts that are not on this ballot (but ARE having an election in this precinct), creating -as a result- the final ballot boundary polygon
                                                //check to see if ballot color is white, if so, skip to creating the feature (aka: bypass the symetric differnce code because there's nothing to remove, there's only one ballot for this precinct)
                                                if (sqlDR_BallotBoundaries["COLOR"].ToString().Trim() != "WHITE")
                                                {
                                                    //remove these districts from the polygon if there not on the ballot, but they are in the election for this precinct

                                                    //REMOVE ELEM SCHOOLS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                    if (boolElemDistOnThisBallot == false & boolElemDistInPct == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'S' AND BDVAL in (" + strElemSchoolUniqueBdVals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' elem school districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the elem school boundaries (that make up this precinct) together
                                                        pPolyUnionSchoolDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current voting precinct
                                                        pTopoOp = pPolyUnionSchoolDistRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionSchoolDistRemove = pTopoOp.Intersect(pPolyGenElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyGenElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionSchoolDistRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }


                                                    //REMOVE HIGH SCHOOLS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                    if (boolHSDistOnThisBallot == false & boolHSDistInPct == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'S' AND BDVAL in (" + strHSSchoolUniqueBdVals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFClassHighSchools.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' high school districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the high school dist boundaries (that make up this precinct) together
                                                        pPolyUnionHSSchoolDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current voting precinct
                                                        pTopoOp = pPolyUnionHSSchoolDistRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionHSSchoolDistRemove = pTopoOp.Intersect(pPolyGenElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyGenElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionHSSchoolDistRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }


                                                    //REMOVE CITIES AND TOWNS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                    if (boolCityTownOnThisBallot == false & boolCityTownInPct == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'C' AND BDVAL in (" + strCityTownUniqueBdVals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' cities and towns using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the cities and towns boundaries (that make up this precinct) together
                                                        pPolyUnionCityTownRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current voting precinct
                                                        pTopoOp = pPolyUnionCityTownRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionCityTownRemove = pTopoOp.Intersect(pPolyGenElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyGenElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionCityTownRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }


                                                    //REMOVE TECH DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                    if (boolTechDistOnThisBallot == false & boolTechDistInPct == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'V' AND BDVAL in (" + strTechDistUniqueBdVals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' tech districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the tech dist boundaries (that make up this precinct) together
                                                        pPolyUnionTechDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current voting precinct
                                                        pTopoOp = pPolyUnionTechDistRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionTechDistRemove = pTopoOp.Intersect(pPolyGenElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyGenElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionTechDistRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }


                                                    //REMOVE FIRE DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                    if (boolFireDistOnThisBallot == false & boolFireDistInPct == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'F' AND BDVAL in (" + strFireDistUniqueBdVals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' fire districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the tech dist boundaries (that make up this precinct) together
                                                        pPolyUnionFireDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current voting precinct
                                                        pTopoOp = pPolyUnionFireDistRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionFireDistRemove = pTopoOp.Intersect(pPolyGenElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyGenElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionFireDistRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }


                                                    //REMOVE SANITARY DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                    if (boolSanitaryOnThisBallot == false & boolSanitaryDistInPct == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'T' AND BDVAL in (" + strSanitaryDistUniqueBdVals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' sanitary districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the sanitary dist boundaries (that make up this precinct) together
                                                        pPolyUnionSanitaryDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current voting precinct
                                                        pTopoOp = pPolyUnionSanitaryDistRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionSanitaryDistRemove = pTopoOp.Intersect(pPolyGenElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyGenElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionSanitaryDistRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }


                                                    //REMOVE Q DISTS FROM BALLOT BOUNDARY - IF NOT ON BALLOT//
                                                    if (boolSanitaryOnThisBallot == false & boolSanitaryDistInPct == true)
                                                    {
                                                        pQueryFilter = new QueryFilter();
                                                        pQueryFilter.WhereClause = "BDTYPE = 'Q' AND BDVAL in (" + strQDistUniqueBdvals.Trim() + ")";

                                                        IFeatureCursor pFeatureCursor = pFCElectionBoundaries.Search(pQueryFilter, false);
                                                        IFeature pFeature = pFeatureCursor.NextFeature();

                                                        //check if the query found a feature
                                                        if (pFeature == null)
                                                        {
                                                            MessageBox.Show("SDE could not find the ElectionBoundaries' Q-Districts using the following query: " + pQueryFilter.WhereClause.ToString() + " , on Precinct Number " + sqlDR_GenElecPcts["electpct"] + ".  Note: BDVAL is a string variable created in code by way of a sql-data-reader from DATABASENAME Ballot Table query.", "Query Returned Null", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            return;
                                                        }

                                                        //create geometry bag, so we can put the features(election boundaries) in the geometry bag so we can union them together
                                                        IGeometryBag pGeometryBag = new GeometryBagClass();
                                                        //define the geometry bag's spatial reference before adding geometries
                                                        pGeometryBag.SpatialReference = pGeoDataset.SpatialReference;
                                                        IGeometryCollection pGeometryCollection = pGeometryBag as IGeometryCollection;

                                                        while (pFeature != null)
                                                        {
                                                            //simplyify before adding to geometry collection
                                                            IGeometry arcGeometrySimplified1 = pFeature.Shape;
                                                            arcGeometrySimplified1.SpatialReference = pFeature.Shape.SpatialReference;
                                                            IPolygon arcPolySimplified1 = arcGeometrySimplified1 as IPolygon;
                                                            arcPolySimplified1.SimplifyPreserveFromTo();

                                                            object missing = Type.Missing;
                                                            pGeometryCollection.AddGeometry(arcPolySimplified1, ref missing, ref missing);

                                                            pFeature = pFeatureCursor.NextFeature();
                                                        }

                                                        //union all the Q dist boundaries (that make up this precinct) together
                                                        pPolyUnionQDistRemove.ConstructUnion(pGeometryBag as IEnumGeometry);

                                                        //intersect the bounary to be removed, with the current voting precinct
                                                        pTopoOp = pPolyUnionQDistRemove as ITopologicalOperator4;
                                                        pTopoOp.Simplify();
                                                        pPolyUnionQDistRemove = pTopoOp.Intersect(pPolyGenElecBallotBoundary as IGeometry, esriGeometryDimension.esriGeometry2Dimension) as ITopologicalOperator4;
                                                        pTopoOp = null;

                                                        //remove them from the ballot polygon
                                                        pTopoOp = pPolyGenElecBallotBoundary as ITopologicalOperator;
                                                        pTopoOp.Simplify();
                                                        pPolyGenElecBallotBoundary = pTopoOp.SymmetricDifference(pPolyUnionQDistRemove as IGeometry) as IPolygon;
                                                        pTopoOp = null;

                                                        //null out union variables, so we can resue them later
                                                        pGeometryBag = null;
                                                        pGeometryCollection = null;

                                                        //null out the varibales so we can reuse them with the next district
                                                        pQueryFilter = null;
                                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatureCursor);
                                                        pFeatureCursor = null;
                                                        pFeature = null;
                                                    }
                                                } //End of If Statement -- Remove ballot boundaries that are not on this ballot, 'If' the ballot color is not white
                                                #endregion

                                                //add the final polygon shape to ballot-boundary SDE feature class
                                                IFeature pFeatureBallotBoundary = pFClassBallotBoundaries.CreateFeature(); //this one for SDE database
                                                //change this is you don't want file geodatabase//
                                                //IFeature pFeatureBallotBoundary = pFeatureClass.CreateFeature(); //this one for File Geodatabase


                                                //populate the new feature's fields
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("ELECTNO"), sqlDR_BallotBoundaries["ELECTNO"].ToString().Trim());
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("ELECTDATE"), cboCPCElections.Text);
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("COLOR"), sqlDR_BallotBoundaries["COLOR"].ToString().Trim());
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SPLITID"), sqlDR_BallotBoundaries["SPLITID"].ToString().Trim());
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("ELECTPCT"), sqlDR_BallotBoundaries["ELECTPCT"].ToString().Trim());
                                                //if zero in DatabaseName, add blank field in arc feature
                                                if (sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim() == "0")
                                                {
                                                    pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SCHDIST"), "");
                                                }
                                                else
                                                {
                                                    pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SCHDIST"), sqlDR_BallotBoundaries["SCHDIST"].ToString().Trim());
                                                }
                                                //if zero in DatabaseName, add blank field in arc feature
                                                if (sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim() == "0")
                                                {
                                                    pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("HSCHDST"), "");
                                                }
                                                else
                                                {
                                                    pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("HSCHDST"), sqlDR_BallotBoundaries["HSCHDST"].ToString().Trim());
                                                }
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("CTYDIST"), sqlDR_BallotBoundaries["CTYDIST"].ToString().Trim());
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("EVITDIST"), sqlDR_BallotBoundaries["EVITDIST"].ToString().Trim());
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("FIREDIST"), sqlDR_BallotBoundaries["FIREDIST"].ToString().Trim());
                                                //pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("VOTRTOT"), sqlDR_BallotBoundaries["VOTRTOT"].ToString().Trim());
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("SANTDIST"), sqlDR_BallotBoundaries["SANTDIST"].ToString().Trim());
                                                //check to make sure the value in this DatabaseName record contains a Q-District, if so, then add the value from this field to the new feature
                                                if (boolQDistOnThisBallot == true)
                                                {
                                                    pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("BLN1DIST"), sqlDR_BallotBoundaries["BLN1DIST"].ToString().Trim());
                                                }
                                                pFeatureBallotBoundary.set_Value(pFeatureBallotBoundary.Fields.FindField("DateCreated"), DateAndTime.Now);


                                                //save and store the new feature
                                                pFeatureBallotBoundary.Shape = pPolyGenElecBallotBoundary;
                                                pFeatureBallotBoundary.Store();

                                            } //end of while-loop - creating a unique polygon features for each ballot boundary 

                                            //null out the feature referencing the current precinct, for reuse with next precinct
                                            pFeatGenElecPct = null;

                                            //close the data reader, so it can reused with next ballot type
                                            if (sqlDR_BallotBoundaries != null)
                                            {
                                                if (!sqlDR_BallotBoundaries.IsClosed)
                                                {
                                                    sqlDR_BallotBoundaries.Close();
                                                }
                                                sqlDR_BallotBoundaries = null;
                                            }
                                        }

                                        //null out feature cursor
                                        System.Runtime.InteropServices.Marshal.ReleaseComObject(pFeatCursor_GenPcts);
                                        pFeatCursor_GenPcts = null;

                                        //clear out some viariables so they can be reused in the next precinct
                                        if (pPolyUnionSchoolDist != null)
                                        {
                                            pPolyUnionSchoolDist = null;
                                        }
                                        if (pPolyUnionHSSchoolDist != null)
                                        {
                                            pPolyUnionHSSchoolDist = null;
                                        }
                                        if (pPolyUnionCityTown != null)
                                        {
                                            pPolyUnionCityTown = null;
                                        }
                                        if (pPolyUnionTechDist != null)
                                        {
                                            pPolyUnionTechDist = null;
                                        }
                                        if (pPolyUnionFireDist != null)
                                        {
                                            pPolyUnionFireDist = null;
                                        }
                                        if (pPolyUnionSanitaryDist != null)
                                        {
                                            pPolyUnionSanitaryDist = null;
                                        }
                                        if (pPolyUnionQDist != null)
                                        {
                                            pPolyUnionQDist = null;
                                        }
                                        if (pPolyUnionSchoolDistRemove != null)
                                        {
                                            pPolyUnionSchoolDistRemove = null;
                                        }
                                        if (pPolyUnionHSSchoolDistRemove != null)
                                        {
                                            pPolyUnionHSSchoolDistRemove = null;
                                        }
                                        if (pPolyUnionCityTownRemove != null)
                                        {
                                            pPolyUnionCityTownRemove = null;
                                        }
                                        if (pPolyUnionTechDistRemove != null)
                                        {
                                            pPolyUnionTechDistRemove = null;
                                        }
                                        if (pPolyUnionFireDistRemove != null)
                                        {
                                            pPolyUnionFireDistRemove = null;
                                        }
                                        if (pPolyUnionSanitaryDistRemove != null)
                                        {
                                            pPolyUnionSanitaryDistRemove = null;
                                        }
                                        if (pPolyUnionQDistRemove != null)
                                        {
                                            pPolyUnionQDistRemove = null;
                                        }

                                    } //end of while-loop, looping through the precinct list for this election
                                }//end of check for null values in the electpct field in the bcrdclcd DatabaseName table - this can later be deleted, there are a few records without a precint
                            } //end of if statement, checking if general election has precincts associated with the supplied election number

                        } //end of else
                        #endregion
                        //END OF GENERAL ELECTION CODE//  ...END
                    }
                }
                else //could not find an election date for election number
                {
                    MessageBox.Show("The query returned null when searching for election numbers with election date: " + cboCPCElections.SelectedItem.ToString().Trim() + ". Check GIS_GetElectNosFromElectDate query.", "Query Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
	            

                //close the data readers...
                if (sqlDR_ElectNos != null)
                {
                    if (!sqlDR_ElectNos.IsClosed)
                    {
                        sqlDR_ElectNos.Close();
                    }
                    sqlDR_ElectNos = null;
                }

                if (sqlDR_CPC_Pcts != null)
                {
                    if (!sqlDR_CPC_Pcts.IsClosed)
                    {
                        sqlDR_CPC_Pcts.Close();
                    }
                    sqlDR_CPC_Pcts = null;
                }

                if (sqlDR_BallotBoundaries != null)
                {
                    if (!sqlDR_BallotBoundaries.IsClosed)
                    {
                        sqlDR_BallotBoundaries.Close();
                    }
                    sqlDR_BallotBoundaries = null;
                }

                if (sqlDR_CPCs != null)
                {
                    if (!sqlDR_CPCs.IsClosed)
                    {
                        sqlDR_CPCs.Close();
                    }
                    sqlDR_CPCs = null;
                }

                MessageBox.Show("Finished creating SDE  ballot boundaries for the election on  " + cboCPCElections.Text + ".", "Done!", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Message: " + Environment.NewLine + ex.Message + Environment.NewLine + Environment.NewLine +
                "Error Source: " + Environment.NewLine + ex.Source + Environment.NewLine + Environment.NewLine +
                "Error Location:" + Environment.NewLine + ex.StackTrace,
                "Election ArcMap Mapping Tools Error!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }
        


        //this method is executed when the user selects an election date in the combobox - enabling the button
        private void cboCPCElections_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                //show busy mouse
                System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

                if (cboCPCElections.SelectedText != null)
                {
                    cmdCreatePolygons.Enabled = true;
                }
                else
                {
                    cmdCreatePolygons.Enabled = false;
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Message: " + Environment.NewLine + ex.Message + Environment.NewLine + Environment.NewLine +
                "Error Source: " + Environment.NewLine + ex.Source + Environment.NewLine + Environment.NewLine +
                "Error Location:" + Environment.NewLine + ex.StackTrace,
                "Election ArcMap Mapping Tools Error!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }

        }
    }
}


